%option noyywrap yylineno
/*-------------------------- Definitions--------------------------*/
%{
#include <stdio.h>
int line_number = 1;
int column_number = 1;

%}

letter          [A-Za-z]
digit           [0-9]   
number          {digit}+(\.{digit}+)?(E[+-]?{digit}+)?
id              {letter}({letter}|{digit})*
delim           [ \t]
ws              {delim}+
Scomment        \/\/[^\n]*
Mcomment        \/\*([^*]|\*+[^*/])*\*+\/

other           .

%%
int             { fprintf(yyout, "<INT> "); column_number+=yyleng; }
float           { fprintf(yyout, "<FLOAT> "); column_number+=yyleng; }
bool            { fprintf(yyout, "<BOOL> "); column_number+=yyleng; }
if              { fprintf(yyout, "<IF> "); column_number+=yyleng; }
else            { fprintf(yyout, "<ELSE> "); column_number+=yyleng; }
while           { fprintf(yyout, "<WHILE> "); column_number+=yyleng; }
print           { fprintf(yyout, "<PRINT> "); column_number+=yyleng; }
read            { fprintf(yyout, "<READ> "); column_number+=yyleng; }
true            { fprintf(yyout, "<TRUE> "); column_number+=yyleng; }
false           { fprintf(yyout, "<FALSE> "); column_number+=yyleng; }
{number}        { fprintf(yyout, "<NUMBER, %s> ", yytext); column_number+=yyleng; }
{id}            { fprintf(yyout, "<ID, %s> ", yytext); column_number+=yyleng; }
{Scomment}      {}
{Mcomment}      {}
\n              { fprintf(yyout, "\n"); column_number=1; }
{ws}            { column_number += yyleng; }
"+"             { fprintf(yyout, "<PLUS> "); column_number+=yyleng; }
"-"             { fprintf(yyout, "<MINUS> "); column_number+=yyleng; }
"*"             { fprintf(yyout, "<TIMES> "); column_number+=yyleng; }
"/"             { fprintf(yyout, "<DIVISOR> "); column_number+=yyleng; }
":="            { fprintf(yyout, "<EQ> "); column_number+=yyleng; }
"<"             { fprintf(yyout, "<LT> "); column_number+=yyleng; }
"<="            { fprintf(yyout, "<LE> "); column_number+=yyleng; }
"<>"            { fprintf(yyout, "<NE> "); column_number+=yyleng; }
">"             { fprintf(yyout, "<GT> "); column_number+=yyleng; }
">="            { fprintf(yyout, "<GE> "); column_number+=yyleng; }
"&&"            { fprintf(yyout, "<AND> "); column_number+=yyleng; }
"||"            { fprintf(yyout, "<OR> "); column_number+=yyleng; }
";"             { fprintf(yyout, "<SEMICOL> "); column_number+=yyleng; }
","             { fprintf(yyout, "<COMMA> "); column_number+=yyleng; }
"("             { fprintf(yyout, "<LPARENTESE> "); column_number+=yyleng; }
")"             { fprintf(yyout, "<RPARENTESE> "); column_number+=yyleng; }
"{"             { fprintf(yyout, "<LCHAVES> "); column_number+=yyleng; }
"}"             { fprintf(yyout, "<RCHAVES> "); column_number+=yyleng; }
'"'             { fprintf(yyout, "<ASPAS> "); column_number+=yyleng; }


{other}         { fprintf(yyout,"Lexicalerror on line %d and column %d. Input->\"%s\"\n", yylineno,column_number,yytext); column_number+=yyleng; }

%%

int main(int argc, char *argv[]){
    yyin = fopen(argv[1], "r");
    yyout=stdout;
    yylex();
    fclose(yyin);
    return 0;
}